--WallerCade_Project

--This script should run on anyone's computer without error.

--- Drop Tables
/*
DROP TABLE BATTING;
DROP TABLE Event;
DROP TABLE Recipient;
DROP TABLE Location;
DROP TABLE Volunteer;
DROP TABLE Item;
DROP TABLE Donator;
DROP PROCEDURE ContributionCount_sp;
DROP PROCEDURE DonatorLargeUnisex_sp;
DROP PROCEDURE VolunteersAndRecipientsByEvent_sp;
DROP PROCEDURE NumberOfEventsVolunteerd_sp;
DROP PROCEDURE AddDonator_sp;
DROP PROCEDURE IdentifiedRecipients_sp;
DROP VIEW DonatorReport_vw;
DROP VIEW VolunteerReport_vw;
*/
 

--Create Tables
CREATE TABLE Donor (
    DonorID   INT            NOT NULL,
    LastName    VARCHAR(50),
    FirstName   VARCHAR(35),     
    Email       VARCHAR(40)
);

ALTER TABLE Donor
    ADD CONSTRAINT PK_DonorID PRIMARY KEY(DonorID);


   
    
CREATE TABLE Item (
    ItemID              INT GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 1000 INCREMENT BY 1    NOT NULL,
    DonorID           INT             NOT NULL,
    ItemDescription     VARCHAR(50)     NOT NULL,
    ItemSize            VARCHAR(35)      NOT NULL,
    Gender              VARCHAR(6)      NOT NULL,
    Condition           DECIMAL(2,1)    NOT NULL,
    CONSTRAINT PK_Item_ItemID PRIMARY KEY(ItemID),
    CONSTRAINT FK_Item_DonorID FOREIGN KEY(DonorID) REFERENCES Donor(DonorID)
);



CREATE TABLE Recipient (
    RecipientID         INT             NOT NULL,
    ItemID              INT GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 1000 INCREMENT BY 1    NOT NULL,
    LastName            VARCHAR(50),
    FirstName           VARCHAR(35),
    RecipientGender     VARCHAR(6)      NOT NULL,
    CONSTRAINT FK_Recipient_RecipientID PRIMARY KEY(RecipientID),
    CONSTRAINT PK_Recipient_ItemID FOREIGN KEY(ItemID) REFERENCES Item(ItemID)
);

CREATE TABLE Location (
    LocationID          INT             NOT NULL,
    StreetAddress       VARCHAR(50),
    Neighborhood        VARCHAR(25),
    ZipCode             INT,
    CONSTRAINT FK_Location_LocationID PRIMARY KEY(LocationID)
);


CREATE TABLE Volunteer (
    VolunteerID         INT             PRIMARY KEY NOT NULL,
    LastName            VARCHAR(50)     NOT NULL,
    FirstName           VARCHAR(35)     NOT NULL,
    DateOfBirth         INT             NOT NULL
);

ALTER TABLE Volunteer
MODIFY DateofBirth DATE;

CREATE TABLE Event (
    EventID             INT             PRIMARY KEY NOT NULL,
    RecipientID         INT             NOT NULL,
    LocationID          INT             NOT NULL,
    VolunteerID         INT             NOT NULL,
    EventName           VARCHAR (50)    NOT NULL,
    EventDate           INT             NOT NULL,
    CONSTRAINT FK_Event_RecipientID FOREIGN KEY(RecipientID) REFERENCES Recipient(RecipientID),
    CONSTRAINT FK_Event_LocationID FOREIGN KEY(LocationID) REFERENCES Location(LocationID),
    CONSTRAINT FK_Event_VolunteerID FOREIGN KEY(VolunteerID) REFERENCES Volunteer(VolunteerID)
);

ALTER TABLE Event
MODIFY EventDate DATE;


-- Inserting Data

INSERT ALL
INTO Donor
        (DonorID, LastName, FirstName, Email)
VALUES
        (1, 'Dole', 'Robert', 'BobDole@email.com')
INTO Donor
        (DonorID, LastName, FirstName, Email)
VALUES
        (2, 'Auerbach', 'Red', 'goceltics@email.com')
INTO Donor
        (DonorID, LastName, FirstName, Email)
VALUES
        (3, 'Butkus', 'Dick', '1985Bears@email.com')
INTO Donor
        (DonorID, LastName, FirstName, Email)
VALUES
        (4, 'Nowitzki', 'Dirk', 'fadeawayjumper@email.com') 
INTO Donor
        (DonorID, LastName, FirstName, Email)
VALUES
        (5, 'Washington', 'George', 'firstpotus@email.com')
INTO Donor
        (DonorID, LastName, FirstName, Email)
VALUES
        (6, 'Gerard', 'Red', 'snowboarding@email.com')
INTO Donor
        (DonorID, LastName, FirstName, Email)
VALUES
        (7, 'Doncic', 'Luka', '77mavs@gmail.com')
INTO Donor
        (DonorID, LastName, FirstName, Email)
VALUES
        (8, 'Cruz', 'Victory', '80salsadance@email.com')
INTO Donor
        (DonorID, LastName, FirstName, Email)
VALUES
        (9, 'Manning', 'Peyton', 'omahaproductions@email.com')
INTO Donor
        (DonorID, LastName, FirstName, Email)
VALUES
        (10, 'Brady', 'Tom', 'GOATBuisness@email.com')
SELECT 1 FROM dual;


INSERT INTO Item 
        (ItemID, DonorID, ItemDescription, ItemSize, Gender, Condition) 
VALUES
        (1000, 10, 'Jacket', 'L', 'W', 5.2);
INSERT INTO Item 
        (ItemID, DonorID, ItemDescription, ItemSize, Gender, Condition) 
VALUES
        (1001, 9, 'Puffer Jacket', 'L', 'W', 8.6);
INSERT INTO Item 
        (ItemID, DonorID, ItemDescription, ItemSize, Gender, Condition) 
VALUES
        (1002, 6, 'Denim Jacket', 'XL', 'M', 9.8);
INSERT INTO Item 
        (ItemID, DonorID, ItemDescription, ItemSize, Gender, Condition) 
VALUES
        (1003, 8, 'Underwear', 'L', 'M', 9.9);
INSERT INTO Item 
        (ItemID, DonorID, ItemDescription, ItemSize, Gender, Condition) 
VALUES
        (1004, 9, 'Hiking Boots', 'L', 'M', 5.8);
INSERT INTO Item 
        (ItemID, DonorID, ItemDescription, ItemSize, Gender, Condition) 
VALUES
        (1005, 7, 'Stocking Cap', 'L', 'Uni', 7.9);
INSERT INTO Item 
        (ItemID, DonorID, ItemDescription, ItemSize, Gender, Condition) 
VALUES
        (1006, 1, 'Thermal Leggings', 'S', 'Uni', 8.3);
INSERT INTO Item 
        (ItemID, DonorID, ItemDescription, ItemSize, Gender, Condition) 
VALUES
        (1007, 1, 'Wool Socks', 'S', 'Uni', 6.4);
INSERT INTO Item 
        (ItemID, DonorID, ItemDescription, ItemSize, Gender, Condition) 
VALUES
        (1008, 1, 'Down Jacket', 'XXL', 'M', 6.9);
INSERT INTO Item 
        (ItemID, DonorID, ItemDescription, ItemSize, Gender, Condition) 
VALUES
        (1009, 2, 'Mittens', 'M', 'Uni', 8.5);



INSERT INTO Volunteer
        (VolunteerID, LastName, FirstName, DateOfBirth)
VALUES
        (100, 'Gentry', 'Craig', '05-SEP-94');
INSERT INTO Volunteer
        (VolunteerID, LastName, FirstName, DateOfBirth)
VALUES
        (101, 'Shackleford', 'Rusty', '05-SEP-78');
INSERT INTO Volunteer
        (VolunteerID, LastName, FirstName, DateOfBirth)
VALUES
        (102, 'Nay', 'Robert', '06-MAY-93');
INSERT INTO Volunteer
        (VolunteerID, LastName, FirstName, DateOfBirth)
VALUES
        (103, 'Audio', 'Adam', '02-FEB-98');
INSERT INTO Volunteer
        (VolunteerID, LastName, FirstName, DateOfBirth)
VALUES
        (104, 'Dawkins', 'Brian', '07-AUG-87');
INSERT INTO Volunteer
        (VolunteerID, LastName, FirstName, DateOfBirth)
VALUES
        (105, 'Arris', 'Rachael', '07-JAN-94');
INSERT INTO Volunteer
        (VolunteerID, LastName, FirstName, DateOfBirth)
VALUES
        (106, 'Ranchester', 'L.G.', '05-SEP-94');
INSERT INTO Volunteer
        (VolunteerID, LastName, FirstName, DateOfBirth)
VALUES
        (107, 'Johnson', 'Randy', '05-NOV-73');
INSERT INTO Volunteer
        (VolunteerID, LastName, FirstName, DateOfBirth)
VALUES
        (108, 'Baez', 'Javier', '31-DEC-88');
INSERT INTO Volunteer
        (VolunteerID, LastName, FirstName, DateOfBirth)
VALUES
        (109, 'Ware', 'Tiffany', '11-SEP-98');
        
        
 
INSERT INTO Location
       (LocationID, StreetAddress, Neighborhood, ZipCode)
VALUES
        (9000, '123 N Downing St', 'Capitol Hill', 80217);
INSERT INTO Location
       (LocationID, StreetAddress, Neighborhood, ZipCode)
VALUES
        (9001, '2', 'Lakewood', 80240);
INSERT INTO Location
       (LocationID, StreetAddress, Neighborhood, ZipCode)
VALUES
        (9002, '345 S Arapahoe Blvd', 'Soouthglenn', 80262);
INSERT INTO Location
        (LocationID, StreetAddress, Neighborhood, ZipCode)
VALUES
        (9003, '987 E Colfax Ave', 'Park Hill', 80231);
INSERT INTO Location
        (LocationID, StreetAddress, Neighborhood, ZipCode)
VALUES
        (9004, '3000 E Quebec St', 'Central Park', 80232);
INSERT INTO Location
        (LocationID, StreetAddress, Neighborhood, ZipCode)
VALUES
        (9005, '987 E Colfax Ave', 'Park Hill', 80231);
INSERT INTO Location
        (LocationID, StreetAddress, Neighborhood, ZipCode)
VALUES
        (9006, '2002 E Syracuse Ave', 'Commerce City', 80245);
INSERT INTO Location
        (LocationID, StreetAddress, Neighborhood, ZipCode)
VALUES
        (9007, '2187 W Evergreen Pkwy', 'Evergreen', 80261);
INSERT INTO Location
        (LocationID, StreetAddress, Neighborhood, ZipCode)
VALUES
        (9008, '1265 Indian Springs Ave', 'Indian Springs', 80271);
INSERT INTO Location
        (LocationID, StreetAddress, Neighborhood, ZipCode)
VALUES
        (9009, '1245 S Burger St', 'Arvada', 80239);



UPDATE Location
SET    Neighborhood = 'Southglenn'
WHERE  LocationID = 9002;

UPDATE Location
SET    StreetAddress = '214 W Wadsworth Blvd'
WHERE  LocationID = 9001;

UPDATE Location
SET    StreetAddress = '6354 S Pennsylvania Blvd', Neighborhood = 'Cherry Creek', ZipCode = 80254
WHERE  LocationID = 9005;


INSERT INTO Recipient
        (RecipientID, ItemID, RecipientGender)
VALUES
        (10000, 1000, 'Male');
INSERT INTO Recipient
        (RecipientID, ItemID, RecipientGender)
VALUES
        (10001, 1001, 'Male');
INSERT INTO Recipient
        (RecipientID, ItemID, LastName, FirstName, RecipientGender)
VALUES
        (10002, 1002, 'Kellerman', 'Max', 'Male');
INSERT INTO Recipient
        (RecipientID, ItemID,LastName, FirstName, RecipientGender)
VALUES
        (10004, 1003, 'Blankenship', 'Bella', 'Male');        
INSERT INTO Recipient
        (RecipientID, ItemID, RecipientGender)
VALUES
        (10003, 1004, 'Female');       
INSERT INTO Recipient
        (RecipientID, ItemID, RecipientGender)
VALUES
        (10005, 1005, 'Male'); 
INSERT INTO Recipient
        (RecipientID, ItemID, LastName, FirstName, RecipientGender)
VALUES
        (10006, 1006, 'Black', 'Brandon', 'Male'); 
INSERT INTO Recipient
        (RecipientID, ItemID, RecipientGender)
VALUES
        (10007, 1007, 'Male');
INSERT INTO Recipient
        (RecipientID, ItemID, LastName, FirstName, RecipientGender)
VALUES
        (10008, 1008, 'Ochocinco', 'Chad', 'Male');
INSERT INTO Recipient
        (RecipientID, ItemID, RecipientGender)
VALUES
        (10009, 1009, 'Female');
        
        
UPDATE Recipient
SET    RecipientGender = 'Female'
WHERE  RecipientID = 10004;        


INSERT INTO Event
        (EventID, RecipientID, LocationID, VolunteerID, EventName, EventDate)
VALUES
        (20000, 10000, 9000, 100, 'Cap Hill Coat Drive', '02-FEB-23');
INSERT INTO Event
        (EventID, RecipientID, LocationID, VolunteerID, EventName, EventDate)
VALUES
        (20001, 10001, 9001, 101, 'Lakewood Coat Drive', '24-FEB-23');
INSERT INTO Event
        (EventID, RecipientID, LocationID, VolunteerID, EventName, EventDate)
VALUES
        (20002, 10001, 9002, 101, 'Southglenn Coat Drive', '02-JAN-23');        
INSERT INTO Event
        (EventID, RecipientID, LocationID, VolunteerID, EventName, EventDate)
VALUES
        (20003, 10002, 9002, 100, 'SouthGlenn Coat Drive', '12-AUG-22');       
INSERT INTO Event
        (EventID, RecipientID, LocationID, VolunteerID, EventName, EventDate)
VALUES
        (20004, 10003, 9003, 100, 'Park Hill Coat Drive', '02-FEB-23');        
INSERT INTO Event
        (EventID, RecipientID, LocationID, VolunteerID, EventName, EventDate)
VALUES
        (20005, 10000, 9004, 105, 'Central Park Coat Drive', '02-SEP-22');        
INSERT INTO Event
        (EventID, RecipientID, LocationID, VolunteerID, EventName, EventDate)
VALUES
        (20006, 10004, 9005, 104, 'Cherry Creek Coat Drive', '02-FEB-23');        
INSERT INTO Event
        (EventID, RecipientID, LocationID, VolunteerID, EventName, EventDate)
VALUES
        (20007, 10005, 9006, 107, 'Commerce City Coat Drive', '02-NOV-22');        
INSERT INTO Event
        (EventID, RecipientID, LocationID, VolunteerID, EventName, EventDate)
VALUES
        (20008, 10006, 9007, 109, 'Evergreen Coat Drive', '02-FEB-23');        
INSERT INTO Event
        (EventID, RecipientID, LocationID, VolunteerID, EventName, EventDate)
VALUES
        (20009, 10007, 9008, 100, 'Indian Springs Coat Drive', '02-DEC-22');        
        



COMMIT;


--Create Stored Procedures


--SP1

CREATE OR REPLACE PROCEDURE ContributionCount_sp

AS CC SYS_REFCURSOR;

/*-------------------------------------------------------------------------------------------------------------------------------------------

--CREATED: April 6th, 2023
--AUTHOR: Cade Waller
--DESCRIPTION: Returns list of contributors to the nonprofit and a count of contributions each contributor has made in the form of 
               donations or volunteerings.

  --Example: EXEC ContributionCount_sp;
  
  --CHANGE HISTORY
  --Date          Modified By         Notes
  --04/06/2023    CWaller         Procedure Created  
*/----------------------------------------------------------------------------------------------------------------------------------------------------------*/

BEGIN

OPEN CC FOR

SELECT      D.FirstName ||' '|| D.LastName AS Name, COUNT(I.ItemDescription) AS ContributionCount
FROM        Recipient R
INNER JOIN  Item I
ON          R.ItemID = I.ItemID
INNER JOIN  Donor D
ON          I.DonorID = D.DonorID
GROUP BY    D.FirstName ||' '|| D.LastName

UNION

SELECT      V.FirstName ||' '|| V.LastName AS Name, COUNT(E.EventName)
FROM        Recipient R
INNER JOIN  Event E
ON          R.RecipientID = E.RecipientID
INNER JOIN  Volunteer V
ON          E.VolunteerID = V.VolunteerID
GROUP BY    V.FirstName ||' '|| V.LastName
ORDER BY    ContributionCount DESC;

DBMS_SQL.RETURN_RESULT(CC);

END;

/

--SP2

CREATE OR REPLACE PROCEDURE DonorLargeUnisex_sp

AS DLU SYS_REFCURSOR;

/*-------------------------------------------------------------------------------------------------------------------------------------------

--CREATED: April 6th, 2023
--AUTHOR: Cade Waller
--DESCRIPTION: Used to find items that are size 'large' and gender 'unisex'.
               Shows Donor's name and email. 

  --Example: EXEC DonorLargeUnisex_sp;
  
  --CHANGE HISTORY
  --Date          Modified By         Notes
  --04/06/2023    CWaller         Procedure Created  
*/----------------------------------------------------------------------------------------------------------------------------------------------------------*/

BEGIN

OPEN DLU FOR

SELECT      D.FirstName ||' '|| D.LastName AS DonorName, D.Email, I.ItemDescription
FROM        Donor D
INNER JOIN  Item I
ON          D.DonorID = I.DonorID
WHERE       I.ItemSize = 'L'
AND         I.Gender =   'Uni';


DBMS_SQL.RETURN_RESULT(DLU);

END;

/

--SP3 

CREATE OR REPLACE PROCEDURE VolunteersAndRecipientsByEvent_sp

AS VRPE SYS_REFCURSOR;

/*-------------------------------------------------------------------------------------------------------------------------------------------

--CREATED: April 6th, 2023
--AUTHOR: Cade Waller
--DESCRIPTION: Shows how many volunteers worked at a given event and how many recipients left with items.
               Returns results only from the previous three months. 

  --Example: EXEC VolunteersAndRecipientsByEvent_sp;
  
  --CHANGE HISTORY
  --Date          Modified By         Notes
  --04/06/2023    CWaller         Procedure Created  
*/----------------------------------------------------------------------------------------------------------------------------------------------------------*/

BEGIN

OPEN VRPE FOR

SELECT      (SELECT      COUNT(E.RecipientID)
            FROM         Event E) AS NumberOfRecipients,
            NumberOfVolunteers, E.EventName, E.EventDate
FROM        (SELECT      COUNT(VolunteerID) AS NumberOfVolunteers, V.VolunteerID
            FROM        Volunteer V
            GROUP BY    V.VolunteerID) V
INNER JOIN  Event E
ON          V.VolunteerID = E.VolunteerID
WHERE       (SYSDATE - E.EventDate) < 121;


DBMS_SQL.RETURN_RESULT(VRPE);

END;

/

--SP4

CREATE OR REPLACE PROCEDURE NumberOfEventsVolunteerd_sp

AS NEV SYS_REFCURSOR;

/*-------------------------------------------------------------------------------------------------------------------------------------------

--CREATED: April 6th, 2023
--AUTHOR: Cade Waller
--DESCRIPTION: Shows how many times each volunteer has volunteer'd. 

  --Example: EXEC NumberOfEventsVolunteerd_sp;
  
  --CHANGE HISTORY
  --Date          Modified By         Notes
  --04/06/2023    CWaller         Procedure Created  
*/----------------------------------------------------------------------------------------------------------------------------------------------------------*/

BEGIN

OPEN NEV FOR

SELECT       COUNT(V.VolunteerID) AS TimesVolunteerd, V.FirstName ||' '|| V.Lastname AS VolunteerName
FROM         Event E
INNER JOIN   Volunteer V
ON           V.VolunteerID = E.VolunteerID
GROUP BY     V.FirstName ||' '|| V.Lastname;


DBMS_SQL.RETURN_RESULT(NEV);

END;

/

--SP5

CREATE OR REPLACE PROCEDURE GoodConditionCountBySize_sp

AS GCCS SYS_REFCURSOR;

/*-------------------------------------------------------------------------------------------------------------------------------------------

--CREATED: April 6th, 2023
--AUTHOR: Cade Waller
--DESCRIPTION: Number of items (by size) with condition greater than 6/10. 

  --Example: EXEC GoodConditionCountBySize_sp;
  
  --CHANGE HISTORY
  --Date          Modified By         Notes
  --04/06/2023    CWaller         Procedure Created  
*/----------------------------------------------------------------------------------------------------------------------------------------------------------*/

BEGIN

OPEN GCCS FOR

SELECT      CASE WHEN I.ItemSize = 'S' THEN 'Small'
                 WHEN I.ItemSize = 'M' THEN 'Medium'
                 WHEN I.ItemSize = 'L' THEN 'Large'
                 WHEN I.ItemSize = 'XL' THEN 'Extra Large'
                 WHEN I.ItemSize = 'XXL' THEN '2XL'
        ELSE 'Other' END AS ItemSize, 
        COUNT(ItemID) AS ItemCount
FROM        Item I
WHERE       I.Condition > 6.0
GROUP BY    CASE WHEN I.ItemSize = 'S' THEN 'Small'
                 WHEN I.ItemSize = 'M' THEN 'Medium'
                 WHEN I.ItemSize = 'L' THEN 'Large'
                 WHEN I.ItemSize = 'XL' THEN 'Extra Large'
                 WHEN I.ItemSize = 'XXL' THEN '2XL'
        ELSE 'Other' END        
ORDER BY    ItemCount DESC;


DBMS_SQL.RETURN_RESULT(GCCS);

END;

/

--SP6 Transactional

CREATE OR REPLACE PROCEDURE AddDonor_sp
 (
    pLastName            IN VARCHAR,
    pFirstName           IN VARCHAR,
    pEmail               IN VARCHAR
  )  

AS 

/*----------------------------------------------------------------------------------------------------------------------------------
CREATED: April 6th, 2023
AUTHOR:  Cade Waller
DESCRIPTION:  Adds an 'Donor' record.

  Example:
    DECLARE
        LastName            VARCHAR (50);  
        FirstName           VARCHAR (35);
        Email               VARCHAR (50);
        
    BEGIN
        AddDonor_sp
            ('Heim', 'Jonah', 'JH28SC@Rangers.com');
    END;        
  
  
  CHANGE HISTORY
  Date                          MODIFIED BY               NOTES
  04/06/2023                    Cade Waller               Procedure Created
*/----------------------------------------------------------------------------------------------------------------------------------

vDonorID  INT;

BEGIN

        
        --Get the Donor's ID
        SELECT      MAX(DonorID)+1 INTO vDonorID
        FROM        Donor;
        
        --Do the final insert
        INSERT INTO Donor
            (DonorID, LastName, FirstName, Email)
        VALUES
            (vDonorID, pLastName, pFirstName, pEmail);
        
        
            
COMMIT;
    
END;

/

--SP7

CREATE OR REPLACE PROCEDURE IdentifiedRecipients_sp

AS IDR SYS_REFCURSOR;

/*-------------------------------------------------------------------------------------------------------------------------------------------

--CREATED: May 1st, 2023
--AUTHOR: Cade Waller
--DESCRIPTION: Returns receipients who we have a name for. 

  --Example: EXEC IdentifiedRecipients_sp;
  
  --CHANGE HISTORY
  --Date          Modified By         Notes
  --05/01/2023    CWaller         Procedure Created  
*/----------------------------------------------------------------------------------------------------------------------------------------------------------*/

BEGIN

OPEN IDR FOR

SELECT      RecipientID, LastName AS Name
FROM        Recipient
WHERE       LastName is NOT NULL;

DBMS_SQL.RETURN_RESULT(IDR);

END;

/

CREATE OR REPLACE VIEW DonorReport_vw

AS 

/*----------------------------------------------------------------------------------------------------------------------------------
CREATED: May 1st, 2023
AUTHOR:  Cade Waller
DESCRIPTION:  Shows detailed Donor list

  Example:
    SELECT  DonorName, Email, ItemDescription, Condition, RecipientID, StreetAddress    
    FROM    DonorReport_vw;
  
  
  CHANGE HISTORY
  Date                          MODIFIED BY               NOTES
  05/01/2023                    Cade Waller               Procedure Created
*/----------------------------------------------------------------------------------------------------------------------------------

SELECT         D.LastName as DonorName, D.Email, I.ItemDescription, I.Condition, R.RecipientID, L.StreetAddress 
FROM           Donor D
INNER JOIN     Item I 
ON             D.DonorID = I.DonorID
INNER JOIN     Recipient R 
ON             I.ItemID = R.ItemID
INNER JOIN     Event E
ON             R.RecipientID = E.RecipientID
INNER JOIN     Location L
ON             E.LocationID = L.LocationID;



/


CREATE OR REPLACE VIEW VolunteerReport_vw

AS 

/*----------------------------------------------------------------------------------------------------------------------------------
CREATED: May 1st, 2023
AUTHOR:  Cade Waller
DESCRIPTION:  Shows detailed volnteer list

  Example:
    SELECT  VolunteerID, Volunteer, DateOfBirth, EventName, EventDate, StreetAddress    
    FROM    VolunteerReport_vw;
  
  
  CHANGE HISTORY
  Date                          MODIFIED BY               NOTES
  05/01/2023                    Cade Waller               Procedure Created
*/----------------------------------------------------------------------------------------------------------------------------------

SELECT         V.VolunteerID, V.LastName AS Volunteer, V.DateOfBirth, E.EventName, E.EventDate, L.StreetAddress 
FROM           Volunteer V
INNER JOIN     Event E 
ON             V.VolunteerID = E.VolunteerID
INNER JOIN     Location L
ON             E.LocationID = L.LocationID; 


/